# Default directory to save the downloaded torrents.
directory.default.set = "/rtorrent/files"

# Default session directory. Make sure you don't run multiple instance
# of rTorrent using the same session directory. Perhaps using a
# relative path?
session.path.set = "/rtorrent/.session"

# Watch directories (add more as you like, but use unique schedule names)
schedule2 = watch_start, 5, 5, "load.start=/rtorrent/watch/*.torrent"

# Maximum and minimum number of peers to connect to per torrent.
throttle.min_peers.normal.set = 99
throttle.max_peers.normal.set = 100

# Same as above but for seeding completed torrents.
# "-1" = same as downloading.
throttle.min_peers.seed.set = -1
throttle.max_peers.seed.set = -1

# Maximum number of simultaneous downloads / uploads per torrent.
throttle.max_downloads.global.set = 500
throttle.max_uploads.global.set   = 500
throttle.max_downloads.set        = 100
throttle.max_uploads.set          = 100

# Set the numwant field sent to the tracker, which indicates how many peers we want.
trackers.numwant.set = 100

# Set the max amount of memory address space used to mapping file chunks. This refers to memory mapping, not
#  physical memory allocation. Default: `1GB` (`max_memory_usage`)
# This may also be set using ulimit -m where 3/4 will be allocated to file chunks.
pieces.memory.max.set = 1024M

# Maximum number of connections rtorrent can accept/make (`sockets`)
network.max_open_sockets.set = 1024

# Maximum number of open files rtorrent can keep open (you have to modify the system wide settings with ulimit!) (`set_max_open_files`)
network.max_open_files.set = 65536

# Maximum number of simultaneous HTTP request (used by announce or scrape requests) Default: `32` (`set_max_open_http`)
network.http.max_open.set = 512

# Send and receive buffer size for socket. Disabled by default (`0`), this means the default is used by OS
#  (you have to modify the system wide settings!) (`send_buffer_size`, `receive_buffer_size`)
# Increasing buffer sizes may help reduce disk seeking, connection polling as more data is buffered each time
#  the socket is written to. It will result higher memory usage (not visible in rtorrent process!).
network.receive_buffer.size.set = 12M
network.send_buffer.size.set    = 32M

# Preloading a piece of a file. Default: `0` Possible values: `0` (Off) , `1` (Madvise) , `2` (Direct paging).
pieces.preload.type.set = 2

# CURL options to add support for nonofficial SSL trackers and peers
network.http.ssl_verify_host.set = 0
network.http.ssl_verify_peer.set = 0

# CURL option to lower DNS timeout. Default: `60`.
network.http.dns_cache_timeout.set = 30

# Global upload and download rate in KiB.
# "0" for unlimited.
throttle.global_down.max_rate.set_kb = 0
throttle.global_up.max_rate.set_kb   = 0

# Port range to use for listening.
network.port_range.set = "59200-59200"

# Start opening ports at a random position within the port range.
network.port_random.set = no

# Check hash for finished torrents. Might be useful until the bug is
# fixed that causes lack of disk-space not to be properly reported.
pieces.hash.on_completion.set = no

# Set whether the client should try to connect to UDP trackers.
trackers.use_udp.set = yes

# Encryption options, set to none (default) or any combination of the following:
# allow_incoming, try_outgoing, require, require_RC4, enable_retry, prefer_plaintext
#
# The example value allows incoming encrypted connections, starts unencrypted
# outgoing connections but retries with encryption if they fail, preferring
# plain-text to RC4 encryption after the encrypted handshake.
protocol.encryption.set = none

# Enable DHT support for trackerless torrents or when all trackers are down.
# May be set to "disable" (completely disable DHT), "off" (do not start DHT),
# "auto" (start and stop DHT as needed), or "on" (start DHT immediately).
# The default is "off". For DHT to work, a session directory must be defined.
dht.mode.set = auto

# UDP port to use for DHT.
dht.port.set = 6881

# Enable peer exchange (for torrents not marked private).
protocol.pex.set = yes

# Set download list layout style ("full", "compact").
ui.torrent_list.layout.set = "full"

# Run rTorrent as a daemon, controlled via XMLRPC.
system.daemon.set = true

# SCGI Connectivity (for alternative rtorrent interfaces, XMLRPC)
# Use a IP socket with scgi_port, or a Unix socket with scgi_local.
# schedule can be used to set permissions on the unix socket.
network.scgi.open_local = (cat, (session.path), /scgi.sock)

# Max packet size using xmlrpc. Default: `524288` (xmlrpc_size_limit)
network.xmlrpc.size_limit.set = 16M
